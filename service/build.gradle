plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'maven-publish'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs'
    id 'com.diffplug.spotless'
    id 'pmd'
    id 'info.solidsoft.pitest'
    id 'eclipse'
    id 'com.palantir.docker-run'
}

configurations {
    // Remove Junit 4
    all*.exclude module: 'junit'
}

apply from: "$rootDir/gradle/analysis.gradle"
apply from: "$rootDir/gradle/publish.gradle"
apply from: "$rootDir/gradle/integration-test.gradle"

configurations {
    zip
}

dependencies {
    implementation project(':exec-ud-daas-etl-api')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.azure.spring:azure-spring-boot-starter-keyvault-secrets'
    runtimeOnly 'de.codecentric:spring-boot-admin-starter-client'
    runtimeOnly 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Some common BY dependencies
    implementation 'com.blueyonder.exec.ecom:multitenant-spring-boot-starter'
    implementation 'com.blueyonder.exec.ecom:boot-commons'
    implementation 'com.blueyonder.exec.ecom:liam-starter-core'

    // Database dependencies
    runtimeOnly 'org.liquibase:liquibase-core'
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc:9.4.0.jre11'

    // JSON logging support
    runtimeOnly 'net.logstash.logback:logstash-logback-encoder:6.6'
    runtimeOnly 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations'

    // Lombok generated code is annotated to avoid spotbugs scanning
    implementation "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'com.blueyonder.exec.ecom:boot-commons-core-test'
    testImplementation 'com.blueyonder.exec.ecom:liam-starter-testing'
    testImplementation 'com.blueyonder.exec.ecom:bydm-2021.4.0'
    testRuntimeOnly 'com.h2database:h2'
    pitest 'org.pitest:pitest-junit5-plugin'
    integrationTestRuntimeOnly 'com.h2database:h2'
    integrationTestRuntimeOnly 'com.microsoft.sqlserver:mssql-jdbc'

    zip group: 'com.blueyonder.exec.ecom', name: 'appdynamics', version: '0.1.0', classifier: 'appdynamics', ext: 'zip'
    zip group: 'co.elastic.apm', name: 'elastic-apm-agent', version: '1.28.1', ext: 'jar'
}

task copyArtifactsForDockerBuild {
    doLast {
        println "Dependencies:"
        configurations.zip.each {
            println it
            def zipFile = file(it)
            def outputDir = file("${buildDir}/docker")
            copy {
                from zipFile
                into outputDir
            }
        }
    }
}

compileJava.dependsOn 'spotlessApply'
bootJar.dependsOn copyArtifactsForDockerBuild

jar {
    enabled = true
}

bootJar {
    archiveClassifier.set('application')
}

publishing {
    publications {
        service(MavenPublication) {
            from components.java
            artifact source: bootJar, classifier: 'application'
        }
    }
}
