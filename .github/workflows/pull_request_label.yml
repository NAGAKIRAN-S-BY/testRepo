name: Deploy Snapshot to Sandbox

on:
  pull_request:
    types: [labeled]
env:
  HELM_PUBLISH_URL: https://jdasoftware.jfrog.io/jdasoftware/helm-release-local/ecom/exec-ud-daas-etl-service
  HELM_PUBLISH_USER: ${{ secrets.EXEC_ECOM_ARTIFACTORY_USERNAME }}
  HELM_PUBLISH_PASSWORD: ${{ secrets.EXEC_ECOM_ARTIFACTORY_PASSWORD }}
  SERVICE_NAME: exec-ud-daas-etl-service
  SNAPSHOT_VERSION: ${{ format('{0}-SNAPSHOT', github.event.number) }}
  GITHUB_ISSUE_NUMBER: ${{ github.event.number }}
  GITHUB_REPO: ${{ github.event.repository.name }}
  DEPLOYMENT_NOTIFICATION_URL: https://api.github.com/repos/JDA-Product-Development/exec-ecom-azure-deployment/dispatches
  DEPLOYMENT_NOTIFICATION_URL_TOKEN: ${{ secrets.EXEC_ECOM_DEPLOYMENTS_PAT }}

jobs:

  # PRs containing the label "deploy" are automatically deployed to sandbox
  deploy_snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event.label.name == 'deploy' && github.event.pull_request.state == 'open'
    steps:

      # Check if we have an artifact for this PR to deploy
      - name: Check for snapshot artifact
        id: has-artifact
        # Don't fail the workflow because an artifact doesn't exist
        continue-on-error: true
        run: |
          curl -u $HELM_PUBLISH_USER:$HELM_PUBLISH_PASSWORD --fail --head $HELM_PUBLISH_URL/$SERVICE_NAME-$SNAPSHOT_VERSION.tgz

      - name: Notify Deployment Repo
        if: steps.has-artifact.outcome == 'success'
        run: |
          AUTH_HEADER="Authorization: token $DEPLOYMENT_NOTIFICATION_URL_TOKEN"
          PAYLOAD='{ "event_type": "deploy_service_snapshot", "client_payload": { "service": "'"$SERVICE_NAME"'", "version": "'"$SNAPSHOT_VERSION"'", "github_issue_number": "'"$GITHUB_ISSUE_NUMBER"'", "github_repo": "'"$GITHUB_REPO"'", "github_commit_sha": "'"$GITHUB_SHA"'" }'
          curl --request POST "$DEPLOYMENT_NOTIFICATION_URL" --header "$AUTH_HEADER" --header "Content-Type: application/json" --data-raw "$PAYLOAD" -f -i

